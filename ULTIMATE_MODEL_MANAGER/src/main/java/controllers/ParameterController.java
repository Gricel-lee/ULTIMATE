package controllers;

import java.io.IOException;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.layout.VBox;
import parameters.DependencyParameter;
import parameters.DependencyParameterCell;
import parameters.UncategorisedParameter;
import project.Project;
import sharedContext.SharedContext;
import utils.FileUtils;
import utils.Font;

public class ParameterController {
	
	@FXML private Label modelDetails;
	@FXML private ListView<UncategorisedParameter> uParamList;
	@FXML private ListView<DependencyParameter> dParamList; // each HBox will be generated by ParameterDisplay
	@FXML private VBox undefinedParametersVBox;
	@FXML private VBox parameterDialogs;

    private SharedContext sharedContext = SharedContext.getInstance();
    private Project project = sharedContext.getProject();

	@FXML
	public void initialize() {
		setListCells();
		firstcall();
		setModelChangeListener();
		setUCchange();
		setDPchange();
	}
	
	private void firstcall() {
        Platform.runLater(() -> {
            uParamList.setItems(project.getCurrentModel().getUncategorisedParameters());
            dParamList.setItems(project.getCurrentModel().getDependencyParameters());
            try {
				modelDetails.setText("Model ID: " + project.getCurrentModel().getModelId() + "\nFile: " + FileUtils.removePrismFileExtension(project.getCurrentModel().getFilePath()));
			} catch (IOException e) {
				e.printStackTrace();
			}
        });
	}
	
	
	private void setModelChangeListener() {
        // When a new model is selected, update the ListView with its uncategorised parameters
        project.currentModelProperty().addListener((obs, oldModel, newModel) -> {
            if (newModel != null) {
                // Retrieve the list of Uncategorised Parameters from the new model.
                Platform.runLater(() -> {
                    uParamList.setItems(newModel.getUncategorisedParameters());
                    dParamList.setItems(project.getCurrentModel().getDependencyParameters());
                    try {
        				modelDetails.setText("Model ID: " + project.getCurrentModel().getModelId() + "\nFile: " + FileUtils.removePrismFileExtension(project.getCurrentModel().getFilePath()));
        			} catch (IOException e) {
        				e.printStackTrace();
        			}
                });
            }
        });
	}
	
	private void setUCchange() {
        project.getCurrentModel().getUncategorisedParameters().addListener((javafx.collections.ListChangeListener<UncategorisedParameter>) change -> {
            Platform.runLater(() -> {
                uParamList.setItems(project.getCurrentModel().getUncategorisedParameters());
            });
       });
	}
	
	private void setDPchange() {
		project.getCurrentModel().getDependencyParameters().addListener((javafx.collections.ListChangeListener<DependencyParameter>) change -> {
            Platform.runLater(() -> {
                dParamList.setItems(project.getCurrentModel().getDependencyParameters());
            });
        });
	}
	
	private void setListCells() {
    	// Customise the appearance of each item in the list view
        uParamList.setCellFactory(param -> new ListCell<>() {
            @Override
            protected void updateItem(UncategorisedParameter item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setGraphic(null);
                    setText(null);
                } else {
                    Label label = new Label(item.getName()); // Display the model ID
                    label.setStyle(Font.UC_LIST_FONT); // Apply font styling
                    setGraphic(label); // Set the label as the cell's graphic
                    setText(null); // Clear any text (not needed with graphic)
                }
            }
        });
        
        // set dParam to the unit cell update
        dParamList.setCellFactory(listView -> {
            DependencyParameterCell cell = new DependencyParameterCell();
            cell.setDependencyUnitListener(new DependencyParameterCell.DependencyUnitListener() {
                @Override
                public void onEdit(DependencyParameter dp) {
                    // Handle edit action for the dependency parameter dp
                    System.out.println("Edit pressed for: " + dp.getName());
                }

                @Override
                public void onRemove(DependencyParameter dp) {
                    // Handle remove action for the dependency parameter dp
                    System.out.println("Remove pressed for: " + dp.getName());
                    project.getCurrentModel().removeDependencyParameter(dp);
                }
            });
            return cell;
        });

	}

}
